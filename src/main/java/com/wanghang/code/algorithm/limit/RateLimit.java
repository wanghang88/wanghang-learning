package com.wanghang.code.algorithm.limit;


/**
 *限流算法:
  参考博文:https://mp.weixin.qq.com/s/XleaesFmDOmEqu7KS--prw

  1)固定窗口限流算法,会有临界值的问题。 比如：一秒钟内限流阀值为5,假如请求在前一秒的0.8-1.2秒内的请求为5个,第二秒内的1-1.2秒内的请求也为5个,
                                       这样的话0.8-1.2s,则并发数高达10个,超过限流的阀值。
  2)滑动窗口限流算法,可以解决固定窗口的临界值问题
                   原理：它将单位时间周期分为n个小周期，分别记录每个小周期内接口的访问次数，并且根据时间滑动删除过期的小周期。

  3)漏桶算法：可以认为就是注水漏水的过程(可以形象地看成往漏斗中注水的过程)。
                  原理:往漏桶中以任意速率流入水，以固定的速率流出水,当水超过桶的容量时，会被溢出，也就是被丢弃。因为桶容量是不变的，保证了整体的速率。
                  应用场景:在正常流量时,系统按照正常的速率处理请求， 但是对于突发流就不行了。

 4)令牌桶算法:面对突发流量的时候，我们可以使用令牌桶算法限流.
                 原理：4.1)有一个令牌管理员，根据限流大小，定速往令牌桶里放令牌,
                      4.2)如果令牌数量满了，超过令牌桶容量的限制，那就丢弃。
                      4.3)系统在接受到一个用户请求时，都会先去令牌桶要一个令牌。如果拿到令牌，那么就处理这个请求的业务逻辑；
                      4.4)如果拿不到令牌，就直接拒绝这个请求。
                 令牌发放的策略正确，这个系统即不会被拖垮，也能提高机器的利用率。
 */

public interface RateLimit {

   boolean execute();

}
